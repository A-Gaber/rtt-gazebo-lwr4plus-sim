#!/usr/bin/env deployer

//## load typekits
import("eigen_typekit")
import("kdl_typekit")
import("rst-rt_typekit")
//## load transport plugins
import("rtt_rsbcomm")

//## import component libs
import("rtt_gazebo_embedded") # gazebo
import("rtt-gazebo-robot-sim") # generic robot sim (coman values)
import("rtt-core-extensions") # kinematic chain views


//### instantiate components


//## gazebo
loadComponent("gazebo","RTTGazeboEmbedded")
setActivity("gazebo",0,10,ORO_SCHED_OTHER)
gazebo.argv = strings("--verbose") # This is optional
gazebo.add_plugin("libRTTGazeboClockPlugin.so")


//## robot sim
loadComponent("lwr_gazebo","cogimon::robotSim")
setActivity("lwr_gazebo",0,11,ORO_SCHED_OTHER)


//## JointPositionCtrl View
loadComponent("lwr_full_arm_JointPositionCtrl","cogimon::RTTKinematicChainJa")
setActivity("lwr_full_arm_JointPositionCtrl",0.01,12,ORO_SCHED_OTHER)


//### load simulation related parts (i.e. models)


//# actually start the gzserver
gazebo.configure()
//# start the simulation process
gazebo.start()
//# disable the dynamics
gazebo.toggleDynamicsSimulation(false)
//# load model
gazebo.spawn_model("kuka-lwr", "model://kuka-lwr-4plus", 10)


//### configure components

//## configure coman sim
//# attach previously loaded model
lwr_gazebo.getModel("kuka-lwr")
//# execute the simulation bridge (coman)
lwr_gazebo.configure()

//## configure kin. chain view
lwr_full_arm_JointPositionCtrl.addPortRobotside("base_JointPositionCtrl", 1)
lwr_full_arm_JointPositionCtrl.addPortRobotside("upper_JointPositionCtrl", 6)
lwr_full_arm_JointPositionCtrl.addPortRobotFBside("base_JointFeedback", 1)
lwr_full_arm_JointPositionCtrl.addPortRobotFBside("upper_JointFeedback", 6)
lwr_full_arm_JointPositionCtrl.setChainandCtrlName("base", "JointPositionCtrl")
lwr_full_arm_JointPositionCtrl.setChainandCtrlName("upper", "JointPositionCtrl")
lwr_full_arm_JointPositionCtrl.configure()


//### connect components


//## connect lwr_full_arm_JointPositionCtrl to lwr_gazebo
var ConnPolicy cp;
//# command
connect("lwr_full_arm_JointPositionCtrl.base_JointPositionCtrl", "lwr_gazebo.base_JointPositionCtrl", cp)
//# feedback
connect("lwr_gazebo.base_JointFeedback", "lwr_full_arm_JointPositionCtrl.base_JointFeedback", cp)


//### retrieve joint information


lwr_full_arm_JointPositionCtrl.retrieveJointMappings()


//### connect to outside world

#/vol/cogimon/bin/rsb-toolscl0.13 send -I/vol/cogimon/share/rst0.13/proto/stable/ -l/vol/cogimon/share/rst0.13/proto/stable/rst/kinematics/JointAngles.proto 'pb:.rst.kinematics.JointAngles:{angles: [-0.2,0.5,0,0,0,0,0] }' 'socket:/coman/left_arm/JointPositionCtrl'
stream("lwr_full_arm_JointPositionCtrl.command", rsb.transport.socket.scope("/lwr/full_arm/JointPositionCtrl"))

stream("lwr_full_arm_JointPositionCtrl.feedback", rsb.transport.socket.scope("/lwr/full_arm/JointFeedback"))


//### start components


lwr_full_arm_JointPositionCtrl.start()


//### enable physics simulation again


gazebo.toggleDynamicsSimulation(true)


//### start controller

//### Logging:

loadComponent("file_reporter", "OCL::FileReporting")
loadService("file_reporter", "marshalling")

connectPeers("file_reporter","lwr_full_arm_JointPositionCtrl")

file_reporter.reportComponent("lwr_full_arm_JointPositionCtrl")

file_reporter.configure
file_reporter.start
